#!/usr/bin/env torch-lua

-- help
local help = [==[
Usage: th [options] [script.lua [arguments]]

Options:
  -l name            load library name
  -e statement       execute statement
  -h,--help          print this help
  -a,--async         preload async (libuv) and start async repl (BETA)
  -g,--globals       monitor global variables (print a warning on creation)
  -i,--interactive   enter the REPL after executing a script ]==]

-- parse arguments
local asyncrepl,run,interactive,progargs,statement,lib,globs,_
local parg = arg
local nextarg
for _,arg in ipairs(parg) do
   -- nextarg set?
   if nextarg == 'exec' then
      statement = arg
      nextarg = nil
   elseif nextarg == 'lib' then
      lib = arg
      nextarg = nil
   else
       _,_,lib = arg:find('^%-l(.*)')
       if lib == '' then lib = nil end
   end
   -- load libraries
   if lib then
      local ok = pcall(require,lib)
      if not ok then
         print('could not load ' .. lib .. ', skipping')
      end
   elseif progargs then
      -- program args
      table.insert(progargs,arg)
   elseif not statement then
      -- option?
      local _,_,option = arg:find('^%-%-(.*)')
      local shortopt
      if not option then
         _,_,shortopt = arg:find('^%-(.*)')
      end
      if option or shortopt then
         -- help
         if shortopt == 'h' or option == 'help' then
            print(help)
            os.exit()
         elseif shortopt == 'i' or option == 'interactive' then
            interactive = true
         elseif shortopt == 'e' then
            nextarg = 'exec'
         elseif shortopt == 'a' or option == 'async' then
            asyncrepl = true
            interactive = true
            async = require 'async'
         elseif shortopt == 'g' or option == 'globals' then
            globs = true
         elseif shortopt == 'l' then
            nextarg = 'lib'
         else
            -- unknown
            print('Error: unrecognized flag --' .. option)
            print(help)
            os.exit()
         end
      else
         -- exec program
         run = arg
         progargs = {}
         for k,v in pairs(parg) do
            if k <= 0 then
               progargs[k] = v
            end
         end
      end
   end
end

-- load repl
local repl = require 'trepl'

-- monitor globals
if globs then
   monitor_G()
end

-- statement
if statement then
   -- exec statement:
   local s = loadstring(statement)
   local ok,res = pcall(s)
   if not ok then
      print('could not execute statement, skipping')
   end
   -- quit by default
   if not interactive then os.exit() end
end

-- run program
if run then
   -- set prog args:
   arg = progargs
   -- run
   dofile(run)
   -- quit by default
   if not interactive then os.exit() end
end

-- start repl
if asyncrepl then
   -- BETA: async repl
   async.repl()
   async.go()
else
   -- regular repl
   repl()
end
